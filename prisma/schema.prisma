generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

model Tipologia {
  id     String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name   String  @db.VarChar
  filmes Filme[]

  @@map("tipologia")
}

model Fondo {
  id     String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name   String  @db.VarChar
  filmes Filme[]

  @@map("fondo")
}

model Coleccion {
  id     String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name   String  @db.VarChar
  filmes Filme[]

  @@map("coleccion")
}

model Estante {
  id     String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name   String  @db.VarChar
  filmes Filme[]

  @@map("estante")
}

model Caja {
  id     String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name   String  @db.VarChar
  filmes Filme[]

  @@map("caja")
}

model Director {
  id             String           @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name           String           @db.VarChar
  det_directores det_directores[]

  @@map("director")
}

model Produccion {
  id              String            @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name            String            @db.VarChar
  detProducciones DetProducciones[]

  @@map("produccion")
}

model Estelar {
  id           String         @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name         String         @db.VarChar
  detEstelares DetEstelares[]

  @@map("estelar")
}

model Genero {
  id         String       @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name       String       @db.VarChar
  detGeneros DetGeneros[]

  @@map("genero")
}

model Pais {
  id            String        @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name          String        @db.VarChar
  descripciones Descripcion[]

  @@map("pais")
}

model Soporte {
  id              String            @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name            String            @db.VarChar
  caracteristicas Caracteristicas[]

  @@map("soporte")
}

model Tecnica {
  id              String            @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name            String            @db.VarChar
  caracteristicas Caracteristicas[]

  @@map("tecnica")
}

model Catalogador {
  id              String          @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name            String          @db.VarChar
  accesibilidades Accesibilidad[]

  @@map("catalogador")
}

model Capturista {
  id              String          @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name            String          @db.VarChar
  accesibilidades Accesibilidad[]

  @@map("capturista")
}

model Archivo {
  id              String          @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name            String          @db.VarChar
  accesibilidades Accesibilidad[]

  @@map("archivo")
}

model Conservacion {
  id   String @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name String @db.VarChar

  @@map("conservacion")
}

model Intervencion {
  id                          String               @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name                        String               @db.VarChar
  estadoConservacionRealizada EstadoConservacion[] @relation("IntervencionEstadoConservacion_Realizada")
  estadoConservacionSugerida  EstadoConservacion[] @relation("IntervencionEstadoConservacion_Sugerida")

  @@map("intervencion")
}

model Ubicacion {
  id                   String               @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name                 String               @db.VarChar
  estadoConservaciones EstadoConservacion[]

  @@map("ubicacion")
}

model Rol {
  id       String    @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name     String    @db.VarChar
  usuarios Usuario[]

  @@map("rol")
}

model Usuario {
  id       String @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  fullname String @db.VarChar
  nickname String @unique(map: "u_nickname") @db.VarChar
  email    String @unique(map: "u_email") @db.VarChar
  password String @db.VarChar
  fkIdRol  String @map("fk_id_rol") @db.Uuid
  rol      Rol    @relation(fields: [fkIdRol], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rol_usuario")

  @@map("usuario")
}

model Filme {
  id                 String               @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  titulo             String               @db.VarChar
  copias             Int
  imagen1            String?              @db.VarChar
  imagen2            String?              @db.VarChar
  imagen3            String?              @db.VarChar
  createdAt          DateTime?            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?            @default(now()) @updatedAt @db.Timestamptz(6)
  deletedAt          DateTime?            @db.Timestamptz(6)
  fkIdTipologia      String               @map("fk_id_tipologia") @db.Uuid
  fkIdFondo          String               @map("fk_id_fondo") @db.Uuid
  fkIdColeccion      String               @map("fk_id_coleccion") @db.Uuid
  fkIdCaja           String               @map("fk_id_caja") @db.Uuid
  fkIdEstante        String               @map("fk_id_estante") @db.Uuid
  articulo           String?              @db.VarChar
  copias_disponibles Int?
  Accesibilidad      Accesibilidad[]
  Caracteristicas    Caracteristicas[]
  Descripcion        Descripcion[]
  det_directores     det_directores[]
  DetEstelares       DetEstelares[]
  DetGeneros         DetGeneros[]
  DetProducciones    DetProducciones[]
  EstadoConservacion EstadoConservacion[]
  caja               Caja                 @relation(fields: [fkIdCaja], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_caja")
  coleccion          Coleccion            @relation(fields: [fkIdColeccion], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_coleccion")
  estante            Estante              @relation(fields: [fkIdEstante], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_estante")
  fondo              Fondo                @relation(fields: [fkIdFondo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_fondo")
  tipologia          Tipologia            @relation(fields: [fkIdTipologia], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_tipologia")
  prestamo           prestamo[]

  @@map("filme")
}

model Descripcion {
  id          String @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  yearRelease Int    @map("year_release")
  fkIdFilme   String @map("fk_id_filme") @db.Uuid
  fkIdPais    String @map("fk_id_pais") @db.Uuid
  filme       Filme  @relation(fields: [fkIdFilme], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_descripcion")
  pais        Pais   @relation(fields: [fkIdPais], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_pais")

  @@map("descripcion")
}

model DetProducciones {
  id             String     @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  fkIdFilme      String     @map("fk_id_filme") @db.Uuid
  fkIdProduccion String     @map("fk_id_produccion") @db.Uuid
  produccion     Produccion @relation(fields: [fkIdProduccion], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_det_producciones")
  filme          Filme      @relation(fields: [fkIdFilme], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_producciones_descripcion")

  @@map("det_producciones")
}

model DetEstelares {
  id          String  @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  fkIdFilme   String  @map("fk_id_filme") @db.Uuid
  fkIdEstelar String  @map("fk_id_estelar") @db.Uuid
  estelar     Estelar @relation(fields: [fkIdEstelar], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_det_estelares")
  filme       Filme   @relation(fields: [fkIdFilme], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_estelares_descripcion")

  @@map("det_estelares")
}

model DetGeneros {
  id         String @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  fkIdFilme  String @map("fk_id_filme") @db.Uuid
  fkIdGenero String @map("fk_id_genero") @db.Uuid
  genero     Genero @relation(fields: [fkIdGenero], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_det_generos")
  filme      Filme  @relation(fields: [fkIdFilme], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_generos_descripcion")

  @@map("det_generos")
}

model Caracteristicas {
  id          String        @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  alto        Decimal       @db.Decimal(2, 0)
  ancho       Decimal       @db.Decimal(2, 0)
  tipoMedida  unidad_medida @default(CM) @map("tipo_medida")
  fkIdFilme   String        @map("fk_id_filme") @db.Uuid
  fkIdSoporte String        @map("fk_id_soporte") @db.Uuid
  fkIdTecnica String        @map("fk_id_tecnica") @db.Uuid
  filme       Filme         @relation(fields: [fkIdFilme], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_caracteristicas")
  soporte     Soporte       @relation(fields: [fkIdSoporte], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_soporte")
  tecnica     Tecnica       @relation(fields: [fkIdTecnica], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_tecnica")

  @@map("caracteristicas")
}

model Accesibilidad {
  id                  String      @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  consulta            Boolean
  reproduccion        Boolean
  reproduccionDigital Boolean     @map("reproduccion_digital")
  observaciones       String?     @default("Sin observaciones") @db.VarChar
  yearCataloging      Int         @map("year_cataloging")
  organizacionPrevia  String?     @map("organizacion_previa") @db.VarChar
  fkIdFilme           String      @map("fk_id_filme") @db.Uuid
  fkIdCatalogador     String      @map("fk_id_catalogador") @db.Uuid
  fkIdCapturista      String      @map("fk_id_capturista") @db.Uuid
  fkIdArchivo         String      @map("fk_id_archivo") @db.Uuid
  filme               Filme       @relation(fields: [fkIdFilme], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_accesibilidad")
  archivo             Archivo     @relation(fields: [fkIdArchivo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_archivo")
  capturista          Capturista  @relation(fields: [fkIdCapturista], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_capturista")
  catalogador         Catalogador @relation(fields: [fkIdCatalogador], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_catalogador")

  @@map("accesibilidad")
}

model EstadoConservacion {
  id                        String        @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  numCopia                  Int?          @map("num_copia")
  observaciones             String?       @default("Sin observaciones") @db.VarChar
  consulta                  Boolean?      @default(true)
  fkIdFilme                 String        @map("fk_id_filme") @db.Uuid
  fkIdIntervencionSugerida  String?       @map("fk_id_intervencion_sugerida") @db.Uuid
  fkIdIntervencionRealizada String?       @map("fk_id_intervencion_realizada") @db.Uuid
  fkIdUbicacion             String        @map("fk_id_ubicacion") @db.Uuid
  filme                     Filme         @relation(fields: [fkIdFilme], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_estado_conservacion")
  intervencionRealizada     Intervencion? @relation("IntervencionEstadoConservacion_Realizada", fields: [fkIdIntervencionRealizada], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_intervencion_realizada")
  intervencionSugerida      Intervencion? @relation("IntervencionEstadoConservacion_Sugerida", fields: [fkIdIntervencionSugerida], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_intervencion_sugerida")
  ubicacion                 Ubicacion     @relation(fields: [fkIdUbicacion], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_ubicacion")

  @@map("estado_conservacion")
}

model det_directores {
  id             String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  fk_id_filme    String   @db.Uuid
  fk_id_director String   @db.Uuid
  director       Director @relation(fields: [fk_id_director], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_det_directores")
  filme          Filme    @relation(fields: [fk_id_filme], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_directores_descripcion")
}

model prestamo {
  id          String    @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  fk_id_filme String    @db.Uuid
  name        String    @db.VarChar
  email       String    @db.VarChar
  phone       String    @db.VarChar
  curp        String    @db.VarChar
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @db.Timestamptz(6)
  deletedAt   DateTime? @db.Timestamptz(6)
  filme       Filme     @relation(fields: [fk_id_filme], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_filme_prestamo")
}

enum unidad_medida {
  CM
  PUL
}
